{% include 'header' %}

#import "{{ prefix }}{{ module_info.name }}ViewController.h"

// frameworks
#import <DMTableTools/DMTableTools.h>

// categories
#import "AppLayouts.h"
#import "UIViewController+ApplicationNavigation.h"
#import "UIViewController+CWStatusBarNotification.h"

// managers
#import "StyleKit+Additions.h"

@interface {{ prefix }}{{ module_info.name }}ViewController ()

@property (assign, nonatomic) BOOL isDownloading;

@end

@implementation {{ prefix }}{{ module_info.name }}ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self configureUI];
    [self configureTableView];
    
    [self.viewModel viewIsReady];
    [self updateTableAppereanceAnimated:NO];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Rotation

- (BOOL)shouldAutorotate {
    return YES;
}

- (UIInterfaceOrientationMask)supportedInterfaceOrientations {
    return UIInterfaceOrientationMaskPortrait;
}

#pragma mark - Navigation

- (BOOL)an_setupNavigation {
    return YES;
}

- (BOOL)an_setupMenuButton {
    return YES;
}

- (NSString *)an_title {
    return @"Main";
}

#pragma mark - Status bar

- (UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
}

#pragma mark - Table data

- (void)setDataItems:(NSArray<id<{{ prefix }}{{ module_info.name }}TableModelProtocol>> *)dataItems animated:(BOOL)animated {
    
    [self.tableTools setDataItems:dataItems withAnimation:DMTableToolsDefaultAnimation];
    [self updateTableAppereanceAnimated:animated];
}

#pragma mark - Appereance

- (void)updateTableAppereanceAnimated:(BOOL)animated {
    BOOL isEmpty = [self.tableTools isEmpty];
    BOOL isRequest = self.isDownloading;
    
    BOOL showIndicator = (isEmpty && isRequest) ? YES : NO;
    BOOL showTable = (!showIndicator) ? YES : NO;
    
    CGFloat tableAlpha = (showTable) ? 1.0 : 0.0;
    CGFloat indicatorAlpha = (showIndicator) ? 1.0 : 0.0;
    
    if (showIndicator) {
        [self.activityIndicator startAnimating];
    }
    
    if (animated) {
        [UIView animateWithDuration:0.3 delay:0.0 options:UIViewAnimationOptionBeginFromCurrentState animations:^{
            
            self.tableView.alpha = tableAlpha;
            self.activityIndicator.alpha = indicatorAlpha;
        } completion:^(BOOL finished) {
            BOOL isRequest = self.isDownloading;
            if (!isRequest) {
                [self.activityIndicator stopAnimating];
            }
        }];
    } else {
        self.tableView.alpha = tableAlpha;
        self.activityIndicator.alpha = indicatorAlpha;
        if (!showIndicator) {
            [self.activityIndicator stopAnimating];
        }
    }
    
}

- (void)setIsDownloading:(BOOL)isDownloading animated:(BOOL)animated {
    self.isDownloading = isDownloading;
    
    [self updateTableAppereanceAnimated:animated];
}


@end
